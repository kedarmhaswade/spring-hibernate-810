<h2> Prereq</h2>

<p>
    Make sure you have seen the spring-tiles-bs-jsp-47 project.
</p>

<h2> What is new in this app?</h2>

<h3> Part 8: Using Hibernate and Spring Data JPA</h3>

<ul class="list-group">
    <li class="list-group item"> This requires a bunch of configuration in applicationContext.xml and pom.xml w.r.t.
        some boilerplate copying of stuff!
    </li>
    <li class="list-group item">
        A few errors you'll need to take care of:
        <ol>
            <li class="list-group item">Slf4j error -- the logging mess needs to be taken care of.</li>
            <li class="list-group item">Spring + Maven: The matching wildcard is strict, but no declaration can be found for element
                'jdbc:embedded-database'
            </li>
            <li class="list-group item">java.lang.IllegalArgumentException: No PersistenceProvider specified in EntityManagerFactory
                configuration, and chosen PersistenceUnitInfo does not specify a provider class name either
            </li>
        </ol>
    </li>
    <li class="list-group item"> Then you create your first entity, the JPA entity in the entity subpackage!</li>
    <li class="list-group item"> Look for this in the log:
        Once this is done, you should see:
        <pre>
            Hibernate: create table User (id bigint generated by default as identity (start with 1),
            primary key (id))
            INFO  2015-03-24 20:38:56,847 [main][SchemaExport.java:405] : HHH000230: Schema export complete
        </pre>
        in the console log
    </li>
</ul>

<h3> Part 9: JPA entities</h3>
<p>
    One of the advantages of following these broken-up projects is that I show IntelliJ use in Spring
    development, whereas Jiri shows the use of Eclipse with Spring development. This video starts with
    the nitty-gritty details of enterprise features.
</p>
<p class="alert alert-danger">
    Arguably, having community edition for starters and ultimate edition for Spring development is
    rather unfortunate.
</p>
<p>
     Anyway, we need to use the trial version till our app development brings in money to pay for the license.
</p>
<ul class="list-group">
    <li class="list-group item">
        It's time for us to recognize our app as a JPA app. <br>
        Right click on the project name (spring-hibernate-810), Add Framework Support.<br>
        This should create a persistence.xml in src/main/java/META-INF (an unintuitive location for yax (yet another xml)!)</br>
        Add the following entity to it.
        <pre>
            &lt;persistence-unit name=&quot;java-blog-aggregator&quot;&gt;
                &lt;class&gt;org.kedar.springtut13.entity.User&lt;/class&gt;
            &lt;/persistence-unit&gt;
        </pre>
        Now, your app is (recognized as) a JPA app. The above 'User' entity gives you a persistence-unit and in the
        IDE you should get a "Persistence Tool Window" (hover your mouse over the small rectangle in bottom left corner).
    </li>
    <li class="list-group item">
        If you click the Persistence tool window, the persistence view should show up and your entities under
        the persistence unit named "java-blog-aggregator". The right click menu now shows <span class="badge badge-danger">ER Diagram</span>!
    </li>
    <li class="list-group item">
        Since I have used project lombok, it appears that a lot of boilerplate can be eliminated with annotations.
    </li>
    <li>
        We then create a few entities and relations. JPA helps, but it's really wordy and too technical.
        I found Rails approach to it more human. For instance instead of saying "OneToMany", saying
        "hasMany" is more natural. The @JoinColumn, @JoinTable and mappedBy etc. similarly make
        life complicated. But that's JPA for you.
    </li>
    <li>
        The basic entities are:
        <ul>
            <li> User: @ManyToMany Role</li>
            <li> Role: @ManyToMany User</li>
            <li> User: @OneToMany Blog</li>
            <li> Blog: @OneToMany Item</li>
        </ul>
    </li>
</ul>